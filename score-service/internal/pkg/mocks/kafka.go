// Code generated by MockGen. DO NOT EDIT.
// Source: score-service/internal/client/kafka/kafka_client.go
//
// Generated by this command:
//
//	mockgen -source=score-service/internal/client/kafka/kafka_client.go -destination=score-service/internal/pkg/mocks/kafka.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kafka "github.com/KlassnayaAfrodita/github-user-score/score-service/internal/client/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockKafkaClientInterface is a mock of KafkaClientInterface interface.
type MockKafkaClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaClientInterfaceMockRecorder
	isgomock struct{}
}

// MockKafkaClientInterfaceMockRecorder is the mock recorder for MockKafkaClientInterface.
type MockKafkaClientInterfaceMockRecorder struct {
	mock *MockKafkaClientInterface
}

// NewMockKafkaClientInterface creates a new mock instance.
func NewMockKafkaClientInterface(ctrl *gomock.Controller) *MockKafkaClientInterface {
	mock := &MockKafkaClientInterface{ctrl: ctrl}
	mock.recorder = &MockKafkaClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaClientInterface) EXPECT() *MockKafkaClientInterfaceMockRecorder {
	return m.recorder
}

// ConsumeScoringRequests mocks base method.
func (m *MockKafkaClientInterface) ConsumeScoringRequests(ctx context.Context, handler func(kafka.ScoringRequestMessage) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeScoringRequests", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeScoringRequests indicates an expected call of ConsumeScoringRequests.
func (mr *MockKafkaClientInterfaceMockRecorder) ConsumeScoringRequests(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeScoringRequests", reflect.TypeOf((*MockKafkaClientInterface)(nil).ConsumeScoringRequests), ctx, handler)
}

// ProduceScoringResult mocks base method.
func (m *MockKafkaClientInterface) ProduceScoringResult(ctx context.Context, result kafka.ScoringResultMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceScoringResult", ctx, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceScoringResult indicates an expected call of ProduceScoringResult.
func (mr *MockKafkaClientInterfaceMockRecorder) ProduceScoringResult(ctx, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceScoringResult", reflect.TypeOf((*MockKafkaClientInterface)(nil).ProduceScoringResult), ctx, result)
}
