// Code generated by MockGen. DO NOT EDIT.
// Source: c:\users\smorkashka\github-user-score\collector\internal\clients\github-api\github_client.go

// Package mock_github_api is a generated GoMock package.
package mocks
import (
	context "context"
	reflect "reflect"

	repository "github.com/KlassnayaAfrodita/github-user-score/collector/internal/clients/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockGitHubClientInterface is a mock of GitHubClientInterface interface.
type MockGitHubClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientInterfaceMockRecorder
}

// MockGitHubClientInterfaceMockRecorder is the mock recorder for MockGitHubClientInterface.
type MockGitHubClientInterfaceMockRecorder struct {
	mock *MockGitHubClientInterface
}

// NewMockGitHubClientInterface creates a new mock instance.
func NewMockGitHubClientInterface(ctrl *gomock.Controller) *MockGitHubClientInterface {
	mock := &MockGitHubClientInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubClientInterface) EXPECT() *MockGitHubClientInterfaceMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockGitHubClientInterface) GetStats(ctx context.Context, username string) (repository.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, username)
	ret0, _ := ret[0].(repository.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockGitHubClientInterfaceMockRecorder) GetStats(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockGitHubClientInterface)(nil).GetStats), ctx, username)
}
