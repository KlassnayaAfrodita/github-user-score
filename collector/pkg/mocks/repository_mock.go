// Code generated by MockGen. DO NOT EDIT.
// Source: c:\users\smorkashka\github-user-score\collector\internal\clients\repository\repository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repository "github.com/KlassnayaAfrodita/github-user-score/collector/internal/clients/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockCollectorRepositoryInterface is a mock of CollectorRepositoryInterface interface.
type MockCollectorRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorRepositoryInterfaceMockRecorder
}

// MockCollectorRepositoryInterfaceMockRecorder is the mock recorder for MockCollectorRepositoryInterface.
type MockCollectorRepositoryInterfaceMockRecorder struct {
	mock *MockCollectorRepositoryInterface
}

// NewMockCollectorRepositoryInterface creates a new mock instance.
func NewMockCollectorRepositoryInterface(ctrl *gomock.Controller) *MockCollectorRepositoryInterface {
	mock := &MockCollectorRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockCollectorRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorRepositoryInterface) EXPECT() *MockCollectorRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockCollectorRepositoryInterface) CreateUser(ctx context.Context, username string) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCollectorRepositoryInterfaceMockRecorder) CreateUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCollectorRepositoryInterface)(nil).CreateUser), ctx, username)
}

// GetUserByUsername mocks base method.
func (m *MockCollectorRepositoryInterface) GetUserByUsername(ctx context.Context, username string) (*repository.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockCollectorRepositoryInterfaceMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockCollectorRepositoryInterface)(nil).GetUserByUsername), ctx, username)
}

// SaveUserStats mocks base method.
func (m *MockCollectorRepositoryInterface) SaveUserStats(ctx context.Context, stats repository.Stats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserStats", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserStats indicates an expected call of SaveUserStats.
func (mr *MockCollectorRepositoryInterfaceMockRecorder) SaveUserStats(ctx, stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserStats", reflect.TypeOf((*MockCollectorRepositoryInterface)(nil).SaveUserStats), ctx, stats)
}
