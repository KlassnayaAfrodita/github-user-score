// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc1
// source: api/scoring_manager.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScoringManagerService_StartScoring_FullMethodName = "/scoring_manager.ScoringManagerService/StartScoring"
	ScoringManagerService_GetStatus_FullMethodName    = "/scoring_manager.ScoringManagerService/GetStatus"
)

// ScoringManagerServiceClient is the client API for ScoringManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScoringManagerServiceClient interface {
	// Запуск скоринга по имени пользователя
	StartScoring(ctx context.Context, in *StartScoringRequest, opts ...grpc.CallOption) (*StartScoringResponse, error)
	// Получение статуса заявки по application_id
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
}

type scoringManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScoringManagerServiceClient(cc grpc.ClientConnInterface) ScoringManagerServiceClient {
	return &scoringManagerServiceClient{cc}
}

func (c *scoringManagerServiceClient) StartScoring(ctx context.Context, in *StartScoringRequest, opts ...grpc.CallOption) (*StartScoringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartScoringResponse)
	err := c.cc.Invoke(ctx, ScoringManagerService_StartScoring_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoringManagerServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, ScoringManagerService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScoringManagerServiceServer is the server API for ScoringManagerService service.
// All implementations must embed UnimplementedScoringManagerServiceServer
// for forward compatibility.
type ScoringManagerServiceServer interface {
	// Запуск скоринга по имени пользователя
	StartScoring(context.Context, *StartScoringRequest) (*StartScoringResponse, error)
	// Получение статуса заявки по application_id
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	mustEmbedUnimplementedScoringManagerServiceServer()
}

// UnimplementedScoringManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScoringManagerServiceServer struct{}

func (UnimplementedScoringManagerServiceServer) StartScoring(context.Context, *StartScoringRequest) (*StartScoringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScoring not implemented")
}
func (UnimplementedScoringManagerServiceServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedScoringManagerServiceServer) mustEmbedUnimplementedScoringManagerServiceServer() {}
func (UnimplementedScoringManagerServiceServer) testEmbeddedByValue()                               {}

// UnsafeScoringManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScoringManagerServiceServer will
// result in compilation errors.
type UnsafeScoringManagerServiceServer interface {
	mustEmbedUnimplementedScoringManagerServiceServer()
}

func RegisterScoringManagerServiceServer(s grpc.ServiceRegistrar, srv ScoringManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedScoringManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScoringManagerService_ServiceDesc, srv)
}

func _ScoringManagerService_StartScoring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartScoringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringManagerServiceServer).StartScoring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringManagerService_StartScoring_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringManagerServiceServer).StartScoring(ctx, req.(*StartScoringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScoringManagerService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScoringManagerServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScoringManagerService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScoringManagerServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScoringManagerService_ServiceDesc is the grpc.ServiceDesc for ScoringManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScoringManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scoring_manager.ScoringManagerService",
	HandlerType: (*ScoringManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartScoring",
			Handler:    _ScoringManagerService_StartScoring_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _ScoringManagerService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/scoring_manager.proto",
}
