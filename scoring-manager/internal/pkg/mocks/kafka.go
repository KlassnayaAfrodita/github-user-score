// Code generated by MockGen. DO NOT EDIT.
// Source: scoring-manager/internal/client/kafka/kafka_client.go
//
// Generated by this command:
//
//	mockgen -source=scoring-manager/internal/client/kafka/kafka_client.go -destination=scoring-manager/internal/pkg/mocks/kafka.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kafka "github.com/KlassnayaAfrodita/github-user-score/scoring-manager/internal/client/kafka"
	gomock "github.com/golang/mock/gomock"
)

// MockScoringKafkaClient is a mock of ScoringKafkaClient interface.
type MockScoringKafkaClient struct {
	ctrl     *gomock.Controller
	recorder *MockScoringKafkaClientMockRecorder
	isgomock struct{}
}

// MockScoringKafkaClientMockRecorder is the mock recorder for MockScoringKafkaClient.
type MockScoringKafkaClientMockRecorder struct {
	mock *MockScoringKafkaClient
}

// NewMockScoringKafkaClient creates a new mock instance.
func NewMockScoringKafkaClient(ctrl *gomock.Controller) *MockScoringKafkaClient {
	mock := &MockScoringKafkaClient{ctrl: ctrl}
	mock.recorder = &MockScoringKafkaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoringKafkaClient) EXPECT() *MockScoringKafkaClientMockRecorder {
	return m.recorder
}

// ConsumeScoringResults mocks base method.
func (m *MockScoringKafkaClient) ConsumeScoringResults(ctx context.Context, handle func(kafka.ScoringResultMessage) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeScoringResults", ctx, handle)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsumeScoringResults indicates an expected call of ConsumeScoringResults.
func (mr *MockScoringKafkaClientMockRecorder) ConsumeScoringResults(ctx, handle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeScoringResults", reflect.TypeOf((*MockScoringKafkaClient)(nil).ConsumeScoringResults), ctx, handle)
}

// PublishScoringRequest mocks base method.
func (m *MockScoringKafkaClient) PublishScoringRequest(ctx context.Context, msg kafka.ScoringRequestMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishScoringRequest", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishScoringRequest indicates an expected call of PublishScoringRequest.
func (mr *MockScoringKafkaClientMockRecorder) PublishScoringRequest(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishScoringRequest", reflect.TypeOf((*MockScoringKafkaClient)(nil).PublishScoringRequest), ctx, msg)
}
